# PREPARING DATA
#Install packages
install.packages("tidyverse")
install.packages("correlation")
install.packages("gridExtra")
install.packages("ppcor")
install.packages("cocor")
library(tidyverse)
library(correlation)
library(gridExtra)
library(ppcor)
library(cocor)

#Viewing data
ExamData <- read_csv("student_exam_data.csv")
view(ExamData)
summary(ExamData)

#Defining variables
ExamData$age <- as.numeric(ExamData$age)
ExamData$gender <- as.factor(ExamData$gender)
ExamData$caffeine_intake <- as.numeric(ExamData$caffeine_intake)
ExamData$sleep_quality <- as.numeric(ExamData$sleep_quality)
ExamData$confidence <- as.numeric(ExamData$confidence)
ExamData$revision_hours <- as.numeric(ExamData$revision_hours)
ExamData$study_avg <- as.numeric(ExamData$study_avg)
ExamData$exam_performance <- as.numeric(ExamData$exam_performance)


#Scatterplots
plot1 <- ggplot(ExamData, aes(x = caffeine_intake, y = exam_performance)) +
  geom_point() +
  geom_smooth(method = "lm",
              se = FALSE) +
  theme_classic()

plot2 <- ggplot(ExamData, aes(x = sleep_quality, y = exam_performance)) +
  geom_point() +
  geom_smooth(method = "lm",
              se = FALSE) +
  theme_classic()

grid.arrange(plot1, plot2, nrow = 2, ncol = 2) 

# CORRELATIONS
#Pearsons Correlations
ExamData %>%
  dplyr::select(caffeine_intake, sleep_quality, exam_performance) %>%
  correlation(p_adjust = "none")


#Comparing Correlations
male <- ExamData[ExamData$gender == "0", ]
female <- ExamData[ExamData$gender == "1", ]

cor.test(male$caffeine_intake, male$exam_performance,
         method = "pearson")
cor.test(female$caffeine_intake, female$exam_performance,
         method = "pearson")
cor.test(male$sleep_quality, male$exam_performance,
         method = "pearson")
cor.test(female$sleep_quality, female$exam_performance,
         method = "pearson")

#Plot - Caffeine
cocor.indep.groups(-0.05154634, -0.2921144, 236, 260)

plot_cc <- ggplot(ExamData, aes(x = caffeine_intake, y = exam_performance, colour = gender)) +
  geom_point(aes(shape = gender)) +
  geom_smooth(aes(linetype = gender), method = "lm", se = FALSE) +
  labs(title = "Caffeine intake and exam performance by gender",
       x = "Caffeine intake",
       y = "Exam performance") +
  theme_classic() +
  scale_color_manual(values = c("0" = "grey", "1" = "black ")) +
  scale_linetype_manual(values = c("0" = "solid", "1" = "dashed")) +
  scale_shape_manual(values = c("0" = 16, "1" = 3))
print(plot_cc)
#Have a go at creating your own plot for sleep quality!

#SIMPLE REGRESSION
ExamSimpleReg <- lm(exam_performance ~ caffeine_intake + sleep_quality, 
                    data = ExamData)
summary(ExamSimpleReg)

#HIERARCHICAL REGRESSION 
ExamMultiReg <- lm(exam_performance ~ caffeine_intake + sleep_quality + revision_hours, 
                    data = ExamData)
summary(ExamMultiReg)

Control <- lm(exam_performance ~ revision_hours, 
              data = ExamData)
summary(Control)

r2_control <- summary(Control)$adj.r.squared
r2_full <- summary(ExamMultiReg)$adj.r.squared
r2_change <- r2_full - r2_control
print(r2_change)

anova(Control, ExamMultiReg)
#Have a go at running your own multiple regressions using the other predictors!

#WITH BINARY PREDICTORS
ExamBinaryReg <- lm(exam_performance ~ caffeine_intake + sleep_quality + revision_hours + gender, 
                   data = ExamData)
summary(ExamBinaryReg)

#WITH INTERACTION PREDICTOR
ExamInteractionReg <- lm(exam_performance ~ caffeine_intake + sleep_quality + revision_hours + gender*confidence, 
                    data = ExamData)
summary(ExamInteractionReg)
#Have a go at running your own multiple regressions using binary and interaction predictors!
